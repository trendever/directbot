import { setCookie, getCookie, removeCookie, guid } from '../utils';
import jwt_decode from 'jwt-decode';

/*
 * WARNING: don't use direct (isn't sync correctly).
 * Use vuex/modules/user instead
 */

const prefix  = '_te_';
const storage = new CookieStorage();

/**
 *
 * Get profile
 * Autogenerated and from server (profile.user)
 * @param  {boolean} withoutCache  if then disable caching
 * @return {object}                profile object
 */

export const getProfile = (function() {

  var CACHE = null;

  return function( withoutCache ) {

    if ( CACHE !== null && !withoutCache ) {
      return CACHE;
    }

    /**
     * profile
     * @type {string} uid - инднтификатор юзера
     * @type {object} user - user data
     * @type {string} token - токен авторизации
     * @type {timestamp} first_visit_at - время первого посещения
     * @type {timestamp} last_visit_at  - время последненго посещения
     * @type {boolean} isFirstVisit - флаг, индефицирующий первое посещение
     * @type {boolean} isSubscribedEmail - флаг, индефицирующий подписку, true - подписан
     * @type {timestamp} subscribe_at - время согласия/несогласия с подпиской
     * @ return {object}
     */
    let cookieUser = storage.getItem( 'user' );
    let storageUser = localStorage.getItem('user');
    if (cookieUser === null && storageUser !== null){
      cookieUser = JSON.parse(localStorage.getItem('user'));
    }

    const profile = {
      uid: storage.getItem( 'uid' ),
      user: cookieUser,
      token: storage.getItem( 'token' ),
      first_visit_at: storage.getItem( 'first_visit_at' ),
      last_visit_at: storage.getItem( 'last_visit_at' ),
      isSubscribedEmail: storage.getItem( 'isSubscribedEmail' ),
      subscribe_at: storage.getItem( 'subscribe_at' ),
    };


    if ( !profile.uid ) {
      // if first visit
      profile.uid            = guid();
      profile.first_visit_at = Date.now();
      profile.isFirstVisit   = true;

      storage.setItem( 'uid', profile.uid );
      storage.setItem( 'first_visit_at', profile.first_visit_at  );

    } else {

      profile.isFirstVisit = false;

    }

    storage.setItem( 'last_visit_at', Date.now() );

    CACHE = profile;

    return profile;
  }

})();

export function saveUser( data ) {
  storage.setItem( 'user', data );
  localStorage.setItem('user', JSON.stringify(data))
}

export function saveToken( token ) {
  try {

    const { UID: id } = jwt_decode( token );

    storage.setItem( 'token', token );

    return +id;

  } catch ( err ) {
    console.warn( 'WARNING: incorrect token' );
    return false;
  }
}

export function removeToken() {
  storage.removeItem( 'token' );
  storage.removeItem( 'user' );
}

export function CookieStorage() {
  this.setItem    = ( name, value ) => setCookie( `${prefix}${name}`, value, 1095 );
  this.getItem    = ( name ) => getCookie( `${prefix}${name}` );
  this.removeItem = ( name ) => removeCookie( `${prefix}${name}` );
}

export function getStorage() {
  return storage;
}

export function setSubscribeEmail( flag ) {
  storage.setItem( 'isSubscribedEmail', flag );
  storage.setItem( 'subscribe_at', (new Date()).getTime() );
}


